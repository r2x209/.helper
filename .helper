script=".helper"
version="22.08.16"

repo="https://raw.githubusercontent.com/xa2099/.helper.sh/ui-tweaks"
current_dir=$( cd -- "$( dirname -- "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )
this_file="${current_dir}/.helper"
list_file="${current_dir}/.helper.lst"
temp_file="${current_dir}/.helper.tmp"
help_file="${current_dir}/.helper.md"
editor="nano"

cmds=()
dirs=()
files=()

# ---[ Help ]-------------------------------------------------------------------

help=(
    "$script"
    '-----------------------------------------'
    ''
    '.h   Help (this menu).'
    '.m   Manual.'
    ''
    '.d   Directory to change to.'
    '.dr  Directory Remove from the list.'
    ''
    '.f   File edit.'
    '.fr  File Remove from the list.'
    ''
    '.c   Command to execute.'
    '.cl  Command Load as last history item.'
    '.cr  Command Remove from the list.'
    ''
    '.lg  List Get.'
    '.lp  List Print.'
    '.lr  List Remove.'
    ''
    '.r   Remove .helper and associated files.'
    '.u   Update to the latest version.'
    '.v   Script version.'
    ''
    '-----------------------------------------'
    "                              v. $version"
)

# ---[ Internal Functions ]-----------------------------------------------------

function .header
{
    local pad="$(printf '%0.1s' '-'{1..500})"
    printf '\n\n\n---%b%*.*s\n\n' "[ $@ ]" 0 "$(($(tput cols)-10-${#1}))" "$pad"
}
function .msg
{
    printf "\n---[ %b\n\n\n" "$1"
}

function .splash
{
    local pad
    pad="$(printf '%0.1s' ' '{1..500})"
    for (( i=0; i<$(($(tput lines) / 2)); i++)); do
        printf "\n"
    done
    printf '%*.*s%b\n ' 0 "$((($(tput cols)-2-${#1})/2))" "$pad" "$1"
    for (( i=0; i<$(($(tput lines) / 2)); i++)); do
        printf "\n"
    done
}

function .forget
{
    history -d $(history 1)
}

function .remember
{
    history -s "$@"
}

function .load
{
    local list target
    if [ -f "$@" ]; then
        mapfile -t list < "$@"
        for line in "${list[@]}"; do
            if [[ ! -z "$line" ]]; then
                if ([ $line == "cmds:" ] || [ $line == "dirs:" ] || [ $line == "files:" ]); then
                    target="$line"
                    printf "%b\n" "$target"
                else
                    if [ $target == "dirs:" ]; then
                        if [[ " ${dirs[*]} " =~ " ${line} " ]]; then
                            printf "[x] %s\n" "${line}"
                        else
                            dirs[${#dirs[@]}]="$line"
                            printf "[v] %s\n" "${line}"
                        fi
                    elif [ $target == "files:" ]; then
                        if [[ " ${files[*]} " =~ " ${line} " ]]; then
                            printf "[x] %s\n" "${line}"
                        else
                            files[${#files[@]}]="$line"
                            printf "[v] %s\n" "${line}"
                        fi
                    elif [ $target == "cmds:" ]; then
                        if [[ " ${cmds[*]} " =~ " ${line} " ]]; then
                            printf "[x] %s\n" "${line}"
                        else
                            cmds[${#cmds[@]}]="$line"
                            printf "[v] %s\n" "${line}"
                        fi
                    fi
                fi
            fi
        done
    fi
}

function .save
{
    echo "cmds:" > "$list_file"
    for item in "${cmds[@]}"; do
        echo "$item" >> "$list_file"
    done
    echo "" >> "$list_file"
    echo "dirs:" >> "$list_file"
    for item in "${dirs[@]}"; do
        echo "$item" >> "$list_file"
    done
    echo "files:" >> "$list_file"
    for item in "${files[@]}"; do
        echo "$item" >> "$list_file"
    done
    echo "" >> "$list_file"
}

# ---[ Helper Function ]--------------------------------------------------------

function .b
{
    .forget
    cd -
}

function .c
{
    .forget
    if [ -z "$@" ]; then
        .header "Execute"
        select option in "${cmds[@]}"; do
            .msg "Executed : $option"
            .remember "$option"
            eval "$option"
            break
        done
    else
        .remember "$@"
        if [[ ! " ${cmds[*]} " =~ " $@ " ]]; then
            cmds[${#cmds[@]}]="$@"
            .save
        fi
        eval "$@"
    fi
}

function .cl
{
    local list
    .forget
    .header "Load to History"
    select option in "${cmds[@]}"; do
        .remember "${option}"
        .msg "Loaded : '$option'"
        break
    done
}

function .cr
{
    .forget
    .header "Remove"
    select option in "${cmds[@]}"; do
        unset cmds[$((REPLY - 1))]
        .save
        .msg "Removed : $option"
        break
    done
}

function .d
{
    local list
    .forget
    if [ -z "$@" ]; then
        .header "Change To"
        select option in "${dirs[@]}"; do
            if [ -d $1 ]; then
                .msg "Changed to : $option"
                eval "cd $option"
                break
            else
                .msg "Error : '$1' Does not exist."
            fi
        done
    else
        if [ -d $@ ]; then
            if [[ ! " ${dirs[*]} " =~ " ${@} " ]]; then
                dirs[${#dirs[@]}]="$@"
                .save
            fi
            eval "cd $@"
        else
             .msg "Error : '$@' Does not exist."
        fi
    fi
}

function .dr
{
    local list
    .forget
    .header "Remove"
    select option in "${dirs[@]}"; do
        unset dirs[$((REPLY - 1))]
        .save
        .msg "Removed : $option"
        break
    done
}

function .f
{
    local list
    .forget
    if [ -z "$@" ]; then
        .header "Edit"
        select option in "${files[@]}"; do
            if [ -f $option ]; then
                if [ -w $option  ]; then
                    .remember "${editor} $option"
                    eval "${editor} $option"
                else
                    .remember "sudo ${editor} $option"
                    eval "sudo ${editor} $option"
                fi
                break
            else
                .msg "Error : '$option' File does not exist."
            fi
        done
    else
        if [[ ! " ${files[*]} " =~ " ${@} " ]]; then
            files[${#files[@]}]="$@"
            .save
        fi
        if [[ -f "$@" && ! -w "$@" ]]; then
            .remember "sudo ${editor} $@"
            eval "sudo ${editor} $@"
        else
            .remember "${editor} $@"
            eval "${editor} $@"
        fi
    fi
}

function .fr
{
    local list
    .forget
    .header "Remove"
    select option in "${files[@]}"; do
        unset files[$((REPLY - 1))]
        .save
        .msg "Removed : $option"
        break
    done
}

function .h
{
    local pad vpad longest
    .forget
    pad="$(printf '%0.1s' ' '{1..500})"
    longest=0
    for line in "${help[@]}"; do
        if [ $longest -lt ${#line} ]; then
            longest=${#line}
        fi
    done
    for ((i=0; i<$((($(tput lines)-${#help[@]})/2)); i++)); do
        vpad+="\n"
    done
    printf "$vpad"
    for line in "${help[@]}"; do
        printf '%*.*s%s\n' 0 "$((($(tput cols)-$longest)/2))" "$pad" "$line"
    done
    printf "$vpad"
}

function .l
{
    .forget
    ls -alh --group-directories-first "$@"
}

function .lg
{
    local menu
    .forget
    wget --no-cache -q -O "${temp_file}" "${repo}/lists/.menu"
    mapfile -t menu < "${temp_file}"
    rm -f "${temp_file}"
    .header "List Get"
    select option in "${menu[@]}"; do
        .msg "Loading '$option' lists."
        wget --no-cache -q -O "${temp_file}" "${repo}/lists/${option}.lst"
        mapfile -t list < "${temp_file}"
        .load "${temp_file}"
        rm -f "${temp_file}"
        break
    done
    .save
}

function .lp
{
    .forget
    .header "List"
    cat "${list_file}"
    printf "\n\n"
}

function .lr
{
    local agree
    .forget
    .header "Empty the list."
    read -e -p "---[ Are you sure? Type 'yes' to agree. : " agree
    if [ "${agree}" == "yes" ]; then
        echo " " > "${list_file}"
    fi
    dirs=()
    files=()
    cmds=()
}

function .m
{
    .forget
    if [ ! -f "${help_file}" ]; then
        wget --no-cache -q -O "${help_file}" "${repo}/readme.md"
    fi
    if [ -f "${help_file}" ]; then
        cat "${help_file}" | more
    else
        .msg "Error : Could not download."
    fi
}

function .r
{
    local agree
    .forget
    .header "Remove .helper and all associated files."
    read -e -p "---[ Are you sure? Type 'yes' to agree. : " agree
    if [ "${agree}" == "yes" ]; then
        .remember "rm -f ${this_file}*"
        eval "rm -f ${this_file}*"
    fi
}

function .u
{
    .forget
    .remember "wget --no-cache -q -O ${this_file} ${repo}/.helper"
    eval "wget --no-cache -q -O ${this_file} ${repo}/.helper"
    .remember "source ${this_file}"
    eval "source ${this_file}"
}

function .v
{
    .forget
    .splash "$script  |  $version"
}

# ---[ Autorun ]----------------------------------------------------------------

.load "$list_file"
.splash "$script  |  run .h"
