NAME=".helper"
VERSION="22.7.29"

# ======================================================================================================================
# Configuration.

# Project repo.
PROJECT_REPO="https://raw.githubusercontent.com/xa2099/.helper.sh/main"

# Editor
EDITOR="nano"

# Script directory.
SCRIPT_DIR=$( cd -- "$( dirname -- "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )

# Local list files.
            THIS="${SCRIPT_DIR}/.helper"
            TEMP="${SCRIPT_DIR}/.helper.temp"
   COMMANDS_LIST="${SCRIPT_DIR}/.helper.c"
DIRECTORIES_LIST="${SCRIPT_DIR}/.helper.d"
      FILES_LIST="${SCRIPT_DIR}/.helper.f"
            HELP="${SCRIPT_DIR}/.helper.md"


# ======================================================================================================================
# Help.

help=(
'.c      Command to run.'
'.ch     Command to load as last history item.'
'.cx     Command to remove from the list.'
''
'.d      Directory to change to.'
'.dx     Directory to delete from the list.'
''
'.f      File to edit.'
'.fx     File to remove from the list.'
''
'.sc     Service Check status.'
'.ss     Service Start.'
'.sx     Service Stop.'
'.sr     Service Restart.'
''
'.h      Help.'
'.hf     Help Full.'
'.t      Templates.'
'.v      Script version.'
'.o      Output all lists.'
'.rem    Remove ".helper" and associated files. Remove ".helper" and associated files.'
)


# ======================================================================================================================
# Aliases.

alias .dp="cd -"
alias .l="ls -alh --group-directories-first"


# ======================================================================================================================
# GUI Elements

B='\033[1m'
U='\033[4m'
R='\033[7m'
X='\033[0m'

function center {
    local width pad char
    [[ -z $2 ]] && char=' ' || char="$2"
    width="$(tput cols)"
    pad="$(printf '%0.1s' "$char"{1..500})"
    printf '%*.*s%b%*.*s\n' 0 "$(((width-2-${#1})/2))" "$pad" "$1" 0 "$(((width-2-${#1})/2))" "$pad"
}

function splash {
    local str width height length
    str="$1"
    length=${#str}
    width=$(tput cols)
    height=$(tput lines)
    for (( i=0; i<$((height / 2)); i++)); do
        printf "\n"
    done
    center "$str"
    for (( i=0; i<$((height / 2)); i++)); do
        printf "\n"
    done
}

function header {
    local width pad char
    [[ -z $2 ]] && char='-' || char="$2"
    width="$(tput cols)"
    pad="$(printf '%0.1s' "$char"{1..500})"
    printf '\n\n\n%*.*s%b%*.*s\n\n' 0 3 "$pad" "[ $@ ]" 0 "$((width-10-${#1}))" "$pad"
}

function msg {
    printf "\n---[ %b\n\n\n" "$1"
}


# ======================================================================================================================
# Helper functions.

function .c {
    history -d $(history 1)
    header "Execute Command"
    if [ -z $1 ]; then
        if [ -f "${COMMANDS_LIST}" ]; then
            local list
            mapfile -t list < "${COMMANDS_LIST}"
            select option in "${list[@]}"; do
                msg "Executed : $option"
                history -s "$option"
                eval "$option"
                break
            done
        fi
    else
        echo "$@" >> "${COMMANDS_LIST}"
        history -s "$@"
        eval "$@"
    fi
}

function .ch {
    history -d $(history 1)
    header "Load Command"
    if [ -z $1 ]; then
        if [ -f "${COMMANDS_LIST}" ]; then
            local list
            mapfile -t list < "${COMMANDS_LIST}"
            select option in "${list[@]}"; do
                history -s "${option}"
                msg "Loaded : '$option'"
                break
            done
        fi
    fi
}

function .cx {
    history -d $(history 1)
    header "Remove Command"
    if [ -z $1 ]; then
        if [ -f "${COMMANDS_LIST}" ]; then
            local list
            mapfile -t list < "${COMMANDS_LIST}"
            select option in "${list[@]}"; do
                eval "sed -i '${REPLY}d' ${COMMANDS_LIST}"
                msg "Removed : $REPLY) $option"
                break
            done
        fi
    fi
}

function .d {
    history -d $(history 1)
    header "Change Directory To"
    if [ -z $1 ]; then
        if [ -f "${DIRECTORIES_LIST}" ]; then
            local list
            mapfile -t list < "${DIRECTORIES_LIST}"
            select option in "${list[@]}"; do
                if [ -d $1 ]; then
                    msg "Changed to : $option"
                    history -s "cd $option"
                    eval "cd $option"
                    break
                else
                    msg "Error : '$1' Does not exist."
                fi
            done
        fi
    else
        if [ -d $@ ]; then
            echo "$@" >> "${DIRECTORIES_LIST}"
            eval "cd $@"
        else
             msg "Error : '$@' Does not exist."
        fi
    fi
}

function .dx {
    history -d $(history 1)
    header "Remove Directory"
    if [ -z $1 ]; then
        if [ -f "${DIRECTORIES_LIST}" ]; then
            local list
            mapfile -t list < "${DIRECTORIES_LIST}"
            select option in "${list[@]}"; do
                eval "sed -i '${REPLY}d' ${DIRECTORIES_LIST}"
                msg "Removed : $REPLY) $option"
                break
            done
        fi
    fi
}

function .f {
    history -d $(history 1)
    header "Edit File:"
    if [ -z $1 ]; then
        if [ -f "${FILES_LIST}" ]; then
            local list
            mapfile -t list < "${FILES_LIST}"
            select option in "${list[@]}"; do
                if [ -f $option ]; then
                    if [ -w $option  ]; then
                        history -s "${EDITOR} $option"
                        eval "${EDITOR} $option"
                    else
                        history -s "sudo ${EDITOR} $option"
                        eval "sudo ${EDITOR} $option"
                    fi
                    break
                else
                    msg "Error : '$option' File does not exist."
                fi
            done
        fi
    else
        if [ -f $@ ]; then
            echo "$@" >> "${FILES_LIST}"
            if [ -w $@ ]; then
                history -s "${EDITOR} $@"
                eval "${EDITOR} $@"
            else
                history -s "sudo ${EDITOR} $@"
                eval "sudo ${EDITOR} $@"
            fi
        else
            msg "Error : '$@' File does not exist."
        fi
    fi
}

function .fx {
    history -d $(history 1)
    header "Remove File From List"
    if [ -z $1 ]; then
        local list
        mapfile -t list < "${FILES_LIST}"
        select option in "${list[@]}"; do
            eval "sed -i '${REPLY}d' ${FILES_LIST}"
            msg "Removed : $REPLY) $option"
            break
        done
    fi
}

function .h {
    history -d $(history 1)
    local width height pad long_line
    width=$(tput cols)
    height=$(tput lines)
    pad="$(printf '%0.1s' ' '{1..500})"
    long_line=0
    for line in "${help[@]}"; do
        if [ $long_line -lt ${#line} ]; then
            long_line=${#line}
        fi
    done
    for (( i=0; i<$(((height - ${#help[@]} - 5) / 2)); i++)); do
        printf "\n"
    done
    center "[ Help ]"
    printf "\n"
    for line in "${help[@]}"; do
        printf '%*.*s%s\n' 0 "$(((width - $long_line) / 2))" "$pad" "$line"
    done
    printf "\n"
    center "~ * ~"
    for (( i=0; i<$(((height -  ${#help[@]} - 5) / 2)); i++)); do
        printf "\n"
    done
}

function .hf {
    history -d $(history 1)
    local width long_line pad
    if [ ! -f "${HELP}" ]; then
        history -s "wget -q -O ${HELP} ${PROJECT_REPO}/readme.md"
        wget -q -O "${HELP}" "${PROJECT_REPO}/readme.md"
    fi
    if [ -f "${HELP}" ]; then
        mapfile -t help_lines < "${HELP}"
        long_line=0
        for line in "${help_lines[@]}"; do
            if [ $long_line -lt ${#line} ]; then
                long_line=${#line}
            fi
        done
        printf "long line : $long_line"
        pad="$(printf '%0.1s' ' '{1..500})"
        width=$(tput cols)
        printf "\n\n\n\n"
        for line in "${help_lines[@]}"; do
            printf '%*.*s%s\n' 0 "$(((width - $long_line) / 2))" "$pad" "$line"
        done
        printf "\n\n"
    fi
}

function .n {
    history -d $(history 1)
    for (( i=0; i<$(tput lines); i++)); do
        printf "\n"
    done
}

function .o {
    history -d $(history 1)
    printf "\n%b" "-----.helper.d\n"
    if [ -f "${DIRECTORIES_LIST}" ]; then
        cat "${DIRECTORIES_LIST}"
    fi
    printf "\n%b" "-----.helper.c\n"
    if [ -f "${COMMANDS_LIST}" ]; then
        cat "${COMMANDS_LIST}"
    fi
    printf "\n%b" "-----.helper.f\n"
    if [ -f "${FILES_LIST}" ]; then
        cat "${FILES_LIST}"
    fi
    printf "\n\n"
}

function .rem {
    history -d $(history 1)
    local agree
    header "Remove .helper"
    printf "Are you sure you want to remove .helper and all associated files."
    read -e -p " Type 'yes' to agree. : " agree
    if [ "${agree}" == "yes" ]; then
        history -s "rm ${SCRIPT_DIR}/.helper.*"
        eval "rm ${SCRIPT_DIR}/.helper.*"
    fi
}

function .sc {
    history -d $(history 1)
    header "Checking $1"
    history -s "systemctl status $1"
    systemctl status "$1"
}

function .sr {
    history -d $(history 1)
    header "Restarting $1"
    history -s "systemctl restart $1"
    systemctl restart "$1"
    header "Checking $1"
    history -s "systemctl status $1"
    systemctl status "$1"
}

function .ss {
    history -d $(history 1)
    header "Starting $1'."
    history -s "systemctl start $1"
    systemctl start "$1"
    header "Checking $1"
    history -s "systemctl status $1"
    systemctl status "$1"
}

function .sx {
    history -d $(history 1)
    header "Stopping $1"
    history -s "systemctl stop $1"
    systemctl stop "$1"
    header "Checking $1."
    history -s "systemctl status $1"
    systemctl status "$1"
}

function .t {
    history -d $(history 1)
    wget -q -O "${TEMP}" "${PROJECT_REPO}/templates/.list"
    if [ -f "${TEMP}" ]; then
        local templates template target
        mapfile -t templates < "${TEMP}"
        rm "${TEMP}"
        header "Load Template"
        select option in "${templates[@]}"; do
            msg "Loading '$option' template."
            wget -q -O "${TEMP}" "${PROJECT_REPO}/templates/${option}.t"
            mapfile -t template < "${TEMP}"
            for line in "${template[@]}"; do
                if [[ ! -z "$line" ]]; then
                    if [ '-----' ==  "${line:0:5}" ]; then
                        target=${line:5}
                        printf "\nTO  : %b\n" "${target}"
                    else
                        echo "${line}" >> "${SCRIPT_DIR}/${target}"
                        printf "ADD : %s\n" "${line}"
                    fi
                fi
            done
            # rm "${TEMP}"
            break
        done
    else
        msg "Error : Could not get template list."
    fi
}

function .u {
    history -d $(history 1)
    history -s "wget -q -O ${THIS} ${PROJECT_REPO}/.helper"
    wget -q -O "${THIS}" "${PROJECT_REPO}/.helper"
    history -s source "source ${THIS}"
    source "${THIS}"
}

function .v {
    if [ -z $1 ]; then
        history -d $(history 1)
    fi
    splash "$NAME  |  $VERSION"
}

.v -
