NAME=".helper"
VERSION="22.7.30"

# ======================================================================================================================
# Configuration.

# Project repo.
PROJECT_REPO="https://raw.githubusercontent.com/xa2099/.helper.sh/main"

# Editor
EDITOR="nano"

# Script directory.
SCRIPT_DIR=$( cd -- "$( dirname -- "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )

# Local list files.
THIS_FILE="${SCRIPT_DIR}/.helper"
COMMANDS_FILE="${SCRIPT_DIR}/.helper.c"
DIRECTORIES_FILE="${SCRIPT_DIR}/.helper.d"
EDITOR_FILE="${SCRIPT_DIR}/.helper.e"
HELP_FILE="${SCRIPT_DIR}/.helper.md"
TEMP_FILE="${SCRIPT_DIR}/.helper.t"


# ======================================================================================================================
# Help.

help=(
'        .helper'
'        -------'
''
'.d      Directory to change to.'
'.dx     Remove directory from the list.'
''
'.c      Command to execute.'
'.ch     Command to load as last history item.'
'.cx     Remove command from the list.'
''
'.e      Edit file.'
'.ex     Remove file from edit list.'
''
'.t      Template Load.'
'.p      Print template.'
''
'.r      Remove .helper and associated files.'
'.u      Update to the latest version.'
'.v      Script version.'
''
'.h      Help. (This)'
'.hf     Help Full.'
)


# ======================================================================================================================
# Aliases.

alias .dp="cd -"
alias .l="ls -alh --group-directories-first"


# ======================================================================================================================
# GUI Elements

function center {
    local width pad char
    [[ -z $2 ]] && char=' ' || char="$2"
    width="$(tput cols)"
    pad="$(printf '%0.1s' "$char"{1..500})"
    printf '%*.*s%b%*.*s\n' 0 "$(((width-2-${#1})/2))" "$pad" "$1" 0 "$(((width-2-${#1})/2))" "$pad"
}

function splash {
    local str width height length
    str="$1"
    length=${#str}
    width=$(tput cols)
    height=$(tput lines)
    for (( i=0; i<$((height / 2)); i++)); do
        printf "\n"
    done
    center "$str"
    for (( i=0; i<$((height / 2)); i++)); do
        printf "\n"
    done
}

function header {
    local width pad char
    [[ -z $2 ]] && char='-' || char="$2"
    width="$(tput cols)"
    pad="$(printf '%0.1s' "$char"{1..500})"
    printf '\n\n\n%*.*s%b%*.*s\n\n' 0 3 "$pad" "[ $@ ]" 0 "$((width-10-${#1}))" "$pad"
}

function msg {
    printf "\n---[ %b ]---\n\n\n" "$1"
}


# ======================================================================================================================
# Helper functions.

function .c {
    local list
    history -d $(history 1)
    touch "${COMMANDS_FILE}"
    mapfile -t list < "${COMMANDS_FILE}"
    if [ -z $1 ]; then
        header "Command Execute"
        if [ -f "${COMMANDS_FILE}" ]; then
            select option in "${list[@]}"; do
                msg "Executed : $option"
                history -s "$option"
                eval "$option"
                break
            done
        fi
    else
        if [[ ! " ${list[*]} " =~ " ${@} " ]]; then
            echo "$@" >> "${COMMANDS_FILE}"
        fi
        history -s "$@"
        eval "$@"
    fi
}

function .ch {
    local list
    history -d $(history 1)
    header "Command Load to History"
    touch "${COMMANDS_FILE}"
    mapfile -t list < "${COMMANDS_FILE}"
    select option in "${list[@]}"; do
        history -s "${option}"
        msg "Loaded : '$option'"
        break
    done
}

function .cx {
    local list
    history -d $(history 1)
    header "Command Remove"
    touch "${COMMANDS_FILE}"
    mapfile -t list < "${COMMANDS_FILE}"
    select option in "${list[@]}"; do
        eval "sed -i '${REPLY}d' ${COMMANDS_FILE}"
        msg "Removed : $REPLY) $option"
        break
    done
}

function .d {
    local list
    history -d $(history 1)
    touch "${DIRECTORIES_FILE}"
    mapfile -t list < "${DIRECTORIES_FILE}"
    if [ -z $1 ]; then
        header "Directory Change"
        select option in "${list[@]}"; do
            if [ -d $1 ]; then
                msg "Changed to : $option"
                eval "cd $option"
                break
            else
                msg "Error : '$1' Does not exist."
            fi
        done
    else
        if [ -d $@ ]; then
            if [[ ! " ${list[*]} " =~ " ${@} " ]]; then
                echo "$@" >> "${DIRECTORIES_FILE}"
            fi
            eval "cd $@"
        else
             msg "Error : '$@' Does not exist."
        fi
    fi
}

function .dx {
    local list
    history -d $(history 1)
    header "Remove Directory"
    touch "${DIRECTORIES_FILE}"
    mapfile -t list < "${DIRECTORIES_FILE}"
    select option in "${list[@]}"; do
        eval "sed -i '${REPLY}d' ${DIRECTORIES_FILE}"
        msg "Removed : $REPLY) $option"
        break
    done
}

function .e {
    local list
    history -d $(history 1)
    touch "${EDITOR_FILE}"
    mapfile -t list < "${EDITOR_FILE}"
    if [ -z $1 ]; then
        header "Edit File"
        select option in "${list[@]}"; do
            if [ -f $option ]; then
                if [ -w $option  ]; then
                    history -s "${EDITOR} $option"
                    eval "${EDITOR} $option"
                else
                    history -s "sudo ${EDITOR} $option"
                    eval "sudo ${EDITOR} $option"
                fi
                break
            else
                msg "Error : '$option' File does not exist."
            fi
        done
    else
        if [ -f $@ ]; then
            if [[ ! " ${list[*]} " =~ " ${@} " ]]; then
                echo "$@" >> "${EDITOR_FILE}"
            fi
            if [ -w $@ ]; then
                history -s "${EDITOR} $@"
                eval "${EDITOR} $@"
            else
                history -s "sudo ${EDITOR} $@"
                eval "sudo ${EDITOR} $@"
            fi
        else
            msg "Error : '$@' File does not exist."
        fi
    fi
}

function .ex {
    local list
    history -d $(history 1)
    header "Remove File From List"
    mapfile -t list < "${EDITOR_FILE}"
    select option in "${list[@]}"; do
        eval "sed -i '${REPLY}d' ${EDITOR_FILE}"
        msg "Removed : $REPLY) $option"
        break
    done
}

function .h {
    local width height pad longest
    history -d $(history 1)
    width=$(tput cols)
    height=$(tput lines)
    pad="$(printf '%0.1s' ' '{1..500})"
    longest=0
    for line in "${help[@]}"; do
        if [ $longest -lt ${#line} ]; then
            longest=${#line}
        fi
    done
    for ((i=0; i<$(((height - ${#help[@]}) / 2)); i++)); do
        printf "\n"
    done
    for line in "${help[@]}"; do
        printf '%*.*s%s\n' 0 "$(((width - $longest) / 2))" "$pad" "$line"
    done
    for ((i=0; i<$(((height -  ${#help[@]}) / 2)); i++)); do
        printf "\n"
    done
}

function .hf {
    local width longest pad help
    history -d $(history 1)
    if [ ! -f "${HELP_FILE}" ]; then
        history -s "wget -q -O ${HELP_FILE} ${PROJECT_REPO}/readme.md"
        wget -q -O "${HELP_FILE}" "${PROJECT_REPO}/readme.md"
    fi
    if [ -f "${HELP_FILE}" ]; then
        mapfile -t help < "${HELP_FILE}"
        longest=0
        for line in "${help[@]}"; do
            if [ $longest -lt ${#line} ]; then
                longest=${#line}
            fi
        done
        pad="$(printf '%0.1s' ' '{1..500})"
        width=$(tput cols)
        printf "\n\n\n\n"
        for line in "${help[@]}"; do
            printf '%*.*s%s\n' 0 "$(((width - $longest) / 2))" "$pad" "$line"
        done
        printf "\n\n"
    fi
}

function .p {
    history -d $(history 1)
    printf "\n%b" "-----.helper.d\n"
    touch "${DIRECTORIES_FILE}"
    cat "${DIRECTORIES_FILE}"
    printf "\n%b" "-----.helper.c\n"
    touch "${COMMANDS_FILE}"
    cat "${COMMANDS_FILE}"
    printf "\n%b" "-----.helper.f\n"
    touch "${EDITOR_FILE}"
    cat "${EDITOR_FILE}"
    printf "\n\n"
}

function .r {
    local agree
    history -d $(history 1)
    header "Remove .helper"
    printf "Are you sure you want to remove .helper and all associated files.\n"
    read -e -p " Type 'yes' to agree. : " agree
    if [ "${agree}" == "yes" ]; then
        history -s "rm -f ${THIS_FILE}*"
        eval "rm -f ${THIS_FILE}*"
    fi
}

function .sc {
    history -d $(history 1)
    header "Checking $1"
    systemctl status "$1"
}

function .sr {
    history -d $(history 1)
    header "Restarting $1"
    history -s "systemctl restart $1"
    systemctl restart "$1"
    header "Checking $1"
    systemctl status "$1"
}

function .ss {
    history -d $(history 1)
    header "Starting $1'"
    history -s "systemctl start $1"
    systemctl start "$1"
    header "Checking $1"
    systemctl status "$1"
}

function .sx {
    history -d $(history 1)
    header "Stopping $1"
    history -s "systemctl stop $1"
    systemctl stop "$1"
    header "Checking $1."
    systemctl status "$1"
}

function .t {
    local templates template target target_lines
    history -d $(history 1)
    wget -q -O "${TEMP_FILE}" "${PROJECT_REPO}/templates/.list"
    if [ -f "${TEMP_FILE}" ]; then
        mapfile -t templates < "${TEMP_FILE}"
        rm -f "${TEMP_FILE}"
        header "Template Load "
        select option in "${templates[@]}"; do
            msg "Loading '$option' template."
            wget -q -O "${TEMP_FILE}" "${PROJECT_REPO}/templates/${option}.t"
            mapfile -t template < "${TEMP_FILE}"
            for line in "${template[@]}"; do
                if [[ ! -z "$line" ]]; then
                    if [ '-----' ==  "${line:0:5}" ]; then
                        target=${line:5}
                        printf "\nTO   : %b\n" "${target}"
                        touch "${SCRIPT_DIR}/${target}"
                        mapfile -t target_lines < "${SCRIPT_DIR}/${target}"
                    else
                        if [[ " ${target_lines[*]} " =~ " ${line} " ]]; then
                            printf "SKIP : %s\n" "${line}"
                        else
                            echo "${line}" >> "${SCRIPT_DIR}/${target}"
                            printf "ADD  : %s\n" "${line}"
                        fi
                    fi
                fi
            done
            rm -f "${TEMP_FILE}"
            break
        done
    else
        msg "Error : Missing local list file."
    fi
}

function .u {
    history -d $(history 1)
    history -s "wget -q -O ${THIS_FILE} ${PROJECT_REPO}/.helper"
    wget -q -O "${THIS_FILE}" "${PROJECT_REPO}/.helper"
    history -s source "source ${THIS_FILE}"
    source "${THIS_FILE}"
}

function .v {
    if [ -z $1 ]; then
        history -d $(history 1)
        msg "$NAME | $VERSION"
    else
        splash "$NAME  |  $VERSION"
    fi
}

.v -
