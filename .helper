script=".helper"
version="22.08.16"

repo="https://raw.githubusercontent.com/xa2099/.helper"
current_dir=$( cd -- "$( dirname -- "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )
this_file="${current_dir}/.helper"
list_file="${current_dir}/.helper.lst"
temp_file="${current_dir}/.helper.tmp"
help_file="${current_dir}/.helper.md"
editor="nano"

cmds=()
dirs=()
files=()

# ---[ Help ]-----------------------------------------------------------------------------------------------------------

help=(
    "$script"
    '-------------------------------------------------'
    ''
    '.h    Help (this menu).'
    '.m    Manual.'
    ''
    '.d    Directory to change to.'
    '.dr   Directory Remove from the list.'
    ''
    '.f    File edit.'
    '.fr   File Remove from the list.'
    ''
    '.c    Command to execute.'
    '.cl   Command Load to history.'
    '.clc  Command Load to history with .c and quoted.'
    '.cr   Command Remove from the list.'
    ''
    '.lg   List Get.'
    '.lp   List Print.'
    '.lr   List Remove.'
    ''
    '.r    Remove .helper and associated files.'
    '.u    Update to the latest version.'
    '.v    Script version.'
    ''
    '.a    Autostart .helper on login.'
    '.ar   Autostart Remove.'
    ''
    '-------------------------------------------------'
    "                                      v. $version"
)

# ---[ Internal Functions ]---------------------------------------------------------------------------------------------

function .bootstrap                                                       # funtion to bootstrap it all
{
    .header "$script | v.$version"

    .msg "Loading local lists :"
    .load "$list_file"

    if [ -z $(which "$editor") ]; then
        .msg "'$editor' is not installed. Switching to 'vi'."
        editor="vi"
    fi

    .msg "Type '.h' for help."
}

function .header                                                        # print header
{
    local pad="$(printf '%0.1s' '-'{1..500})"
    printf '\n---%b%*.*s\n\n' "[ $@ ]" 0 "$(($(tput cols)-10-${#1}))" "$pad"
}

function .msg                                                           # print message
{
    printf "\n---[ %b\n\n" "$1"
}

function .splash                                                        # vertically and horizontaly centered message
{
    local pad
    pad="$(printf '%0.1s' ' '{1..500})"
    for (( i=0; i<$(($(tput lines) / 2)); i++)); do
        printf "\n"
    done
    printf '%*.*s%b\n ' 0 "$((($(tput cols)-2-${#1})/2))" "$pad" "$1"
    for (( i=0; i<$(($(tput lines) / 2)); i++)); do
        printf "\n"
    done
}

function .forget                                                        # remove last 'history' item
{
    history -d $(history 1)
}

function .remember                                                      # add to 'history'
{
    history -s "$@"
}

function .load                                                          # load arrays from file
{
    local list target
    if [ -f "$@" ]; then
        mapfile -t list < "$@"
        for line in "${list[@]}"; do
            if [[ ! -z "$line" ]]; then
                if [ "$line" == "cmds:" -o "$line" == "dirs:" -o "$line" == "files:" ]; then
                    printf "   %s\n" "$line"
                    target="${line/:}"
                else
                    if [ "$target" == "dirs" ]; then
                        if [[ " ${dirs[*]} " =~ " ${line} " ]]; then
                            printf "     \e[9m%s\e[0m\n" "${line}"
                        else
                            dirs[${#dirs[@]}]="$line"
                            printf "     %s\n" "${line}"
                        fi
                    elif [ "$target" == "files" ]; then
                        if [[ " ${files[*]} " =~ " ${line} " ]]; then
                            printf "     \e[9m%s\e[0m\n" "${line}"
                        else
                            files[${#files[@]}]="$line"
                            printf "     %s\n" "${line}"
                        fi
                    elif [ "$target" == "cmds" ]; then
                        if [[ " ${cmds[*]} " =~ " $line " ]]; then
                            [printf "     \e[9m%s\e[0m\n" "${line}"
                        else
                            cmds[${#cmds[@]}]="$line"
                            printf "     %s\n" "${line}"
                        fi
                    fi
                fi
            else
                printf "\n"
            fi
        done
        printf "\n"
    fi
}

function .save                                                          # save arrays to file
{
    echo "cmds:" > "$list_file"
    for item in "${cmds[@]}"; do
        echo "$item" >> "$list_file"
    done
    echo "" >> "$list_file"
    echo "dirs:" >> "$list_file"
    for item in "${dirs[@]}"; do
        echo "$item" >> "$list_file"
    done
    echo "" >> "$list_file"
    echo "files:" >> "$list_file"
    for item in "${files[@]}"; do
        echo "$item" >> "$list_file"
    done
    echo "" >> "$list_file"
}

# ---[ Helper Function ]------------------------------------------------------------------------------------------------

function .a                                                             # create autostart
{
    .header "Auto Start"
    read -e -p "---[ Are you sure? Type 'yes' to agree. : " agree
    if [ "${agree}" == "yes" ]; then
        echo "" >> ~/.bashrc
        echo "source $this_file" >> ~/.bashrc
        .msg "Added 'source $this_file' to '~/.bashrc."
    fi
}

function .ar                                                            # remove autostart
{
    .header "Remove Auto Start"
    read -e -p "---[ Are you sure? Type 'yes' to agree. : " agree
    if [ "${agree}" == "yes" ]; then
        sed -i -e '/.helper/d' ~/.bashrc
        .msg "Removed 'source $this_file' from '~/.bashrc'."
    fi
}

function .b                                                             # back directory
{
    .forget
    cd -
}

function .c                                                             # commands
{
    local item choice counter=1
    .forget
    if [ -z "$@" ]; then
        .header "Command"
        for item in "${cmds[@]}"; do
            printf "%-3s%s. %s\n\n" "$indent" "$counter" "$item"
            (( counter++ ))
        done
        read -p " : " choice
        .remember "${cmds[(($choice-1))]}"
        .msg "Running : ${cmds[(($choice-1))]}"
        eval "${cmds[(($choice-1))]}"
    else
        .remember "$@"
        if [[ ! " ${cmds[*]} " =~ " $@ " ]]; then
            cmds[${#cmds[@]}]="$@"
            .save
        fi
        eval "$@"
    fi
}

function .cl                                                            # command load
{
    local item choice counter=1
    .forget
    .header "Command Load"
    for item in "${cmds[@]}"; do
        printf "%-3s%s. %s\n\n" "$indent" "$counter" "$item"
        (( counter++ ))
    done
    read -p " : " choice
    .remember "${cmds[(($choice-1))]}"
    .msg "Loaded : ${cmds[(($choice-1))]} "
}

function .clc                                                           # command load with .c
{
    local item choice counter=1
    .forget
    .header "Command Load Command"
    for item in "${cmds[@]}"; do
        printf "%-3s%s. %s\n\n" "$indent" "$counter" "$item"
        (( counter++ ))
    done
    read -p " : " choice
    .remember ".c \"${cmds[(($choice-1))]}\""
    .msg "Loaded : .c \"${cmds[(($choice-1))]}\""
}

function .cr                                                            # command remove
{
    local item choice counter=1
    .forget
    .header "Command Remove"
    for item in "${cmds[@]}"; do
        printf "%-3s%s. %s\n\n" "$indent" "$counter" "$item"
        (( counter++ ))
    done
    read -p " : " choice
    .msg "Removed : ${cmds[(($choice-1))]} "
    unset cmds[$((choice-1))]
    .save
}

function .d                                                             # directories
{
    local item choice counter=1
    .forget
    if [ -z "$@" ]; then
        .header "Directory"
        for item in "${dirs[@]}"; do
            if [ -d "$item" ]; then
                printf "%-3s%s. %s\n\n" "$indent" "$counter" "$item"
            else
                printf "%-3s%s. \e[9m%s\e[0m\n\n" "$indent" "$counter" "$item"
            fi
            (( counter++ ))
        done
        read -p " : " choice
        .msg "Changing To : ${dirs[(($choice-1))]}"
        eval "cd ${dirs[(($choice-1))]}"
    else
        if [ -d $@ ]; then
            if [[ ! " ${dirs[*]} " =~ " ${@} " ]]; then
                .msg "Saving dir..."
                dirs[${#dirs[@]}]="$@"
                .save
            fi
            eval "cd $@"
        else
             .msg "Error : '$@' Does not exist."
        fi
    fi
}

function .dr                                                            # directrory remove
{
    local item choice counter=1
    .forget
    .header "Directory Remove"
    for item in "${dirs[@]}"; do
        if [ -d "$item" ]; then
            printf "%-3s%s. %s\n\n" "$indent" "$counter" "$item"
        else
            printf "%-3s%s. \e[9m%s\e[0m\n\n" "$indent" "$counter" "$item"
        fi
        (( counter++ ))
    done
    read -p " : " choice
    .msg "Removed : ${dirs[(($choice-1))]} "
    unset dirs[$((choice-1))]
    .save
}

function .f                                                             # files
{
    local item choice counter=1
    .forget
    if [ -z "$@" ]; then
        .header "File"
        for item in "${files[@]}"; do
            if [ -f "$item" ]; then
                printf "%-3s%s. %s\n\n" "$indent" "$counter" "$item"
            else
                printf "%-3s%s. \e[9m%s\e[0m\n\n" "$indent" "$counter" "$item"
            fi
            (( counter++ ))
        done
        read -p "    : " choice
        if [ -w ${files[(($choice-1))]}  ]; then
            .remember "${editor} ${files[(($choice-1))]}"
            .msg "Opening : ${files[(($choice-1))]}"
            eval "${editor} ${files[(($choice-1))]}"
        else
            .remember "sudo ${editor} ${files[(($choice-1))]}"
            .msg "Opening : ${files[(($choice-1))]} (using sudo)"
            eval "sudo ${editor} ${files[(($choice-1))]}"
        fi
        eval "cd ${dirs[(($choice-1))]}"
    else
        if [[ ! " ${files[*]} " =~ " ${@} " ]]; then
            files[${#files[@]}]="$@"
            .save
        fi
        if [[ -f "$@" ]]; then
            if [[ ! -w "$@" ]]; then
                .remember "sudo ${editor} $@"
                eval "sudo ${editor} $@"
            else
                .remember "${editor} $@"
                eval "${editor} $@"
            fi
        else
            .msg "Error : '$@' Does not exist."
        fi
    fi
}

function .fr                                                            # file remove
{
    local item choice counter=1
    .forget
    .header "File Remove"
    for item in "${files[@]}"; do
        if [ -f "$item" ]; then
            printf "%-3s%s. %s\n\n" "$indent" "$counter" "$item"
        else
            printf "%-3s%s. \e[9m%s\e[0m\n\n" "$indent" "$counter" "$item"
        fi
        (( counter++ ))
    done
    read -p "    : " choice
    .msg "Removed : ${files[(($choice-1))]} "
    unset files[$((choice-1))]
    .save
}

function .h                                                             # help
{
    local pad vpad longest
    .forget
    pad="$(printf '%0.1s' ' '{1..500})"
    longest=0
    for line in "${help[@]}"; do
        if [ $longest -lt ${#line} ]; then
            longest=${#line}
        fi
    done
    for ((i=0; i<$((($(tput lines)-${#help[@]})/2)); i++)); do
        vpad+="\n"
    done
    printf "$vpad"
    for line in "${help[@]}"; do
        printf '%*.*s%s\n' 0 "$((($(tput cols)-$longest)/2))" "$pad" "$line"
    done
    printf "$vpad"
}

function .l                                                             # list directory
{
    .forget
    ls -alh --group-directories-first "$@"
}

function .lg                                                            # list get
{
    local menu
    .forget
    wget --no-cache -q -O "${temp_file}" "${repo}/lists/.menu"
    mapfile -t menu < "${temp_file}"
    rm -f "${temp_file}"
    .header "List Get"
    select option in "${menu[@]}"; do
        .msg "Loading '$option' lists."
        wget --no-cache -q -O "${temp_file}" "${repo}/lists/${option}.lst"
        mapfile -t list < "${temp_file}"
        .load "${temp_file}"
        rm -f "${temp_file}"
        break
    done
    .save
}

function .lp                                                            # list print
{
    .forget
    .header "List"
    .save
    cat "${list_file}"
    printf "\n\n"
}

function .lr                                                            # list remove
{
    local agree
    .forget
    .header "Empty the list."
    read -e -p "---[ Are you sure? Type 'yes' to agree. : " agree
    if [ "${agree}" == "yes" ]; then
        echo " " > "${list_file}"
    fi
    dirs=()
    files=()
    cmds=()
}

function .m                                                             # manual
{
    .forget
    if [ ! -f "${help_file}" ]; then
        wget --no-cache -q -O "${help_file}" "${repo}/readme.md"
    fi
    if [ -f "${help_file}" ]; then
        cat "${help_file}" | more
    else
        .msg "Error : Could not download."
    fi
}

function .r                                                             # remove
{
    local agree
    .forget
    .header "Remove .helper and all associated files."
    read -e -p "---[ Are you sure? Type 'yes' to agree. : " agree
    if [ "${agree}" == "yes" ]; then
        .remember "rm -f ${this_file}*"
        eval "rm -f ${this_file}*"
    fi
}

function .u                                                             # update
{
    .forget
    .remember "wget --no-cache -q -O ${this_file} ${repo}/.helper"
    eval "wget --no-cache -q -O ${this_file} ${repo}/.helper"
    .remember "source ${this_file}"
    eval "source ${this_file}"
}

function .v                                                             # version
{
    .forget
    .splash "$script  |  $version"
}

# ---[ Autorun ]--------------------------------------------------------------------------------------------------------

.bootstrap
